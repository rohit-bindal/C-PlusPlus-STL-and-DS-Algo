#include <bits/stdc++.h>
using namespace std;
 

struct node
{
  int info;
 struct node *left;
  struct node *right;
};


node* createNode(int info)
{
  node *root = new node();
  root->info = info;
  root->left = NULL;
  root->right = NULL;

  return root;
}


//Depth-Firs-Search (3 types):

//type 1
void printPostorder(struct node *root)
{
  if(root == NULL)
  return;

  printPostorder(root->left);
  printPostorder(root->right);
  cout<<root->info<<" ";
}

//type 2
void printPreorder(struct node *root)
{
  if(root==NULL)
  return;

  cout<<root->info<<" ";
  printPreorder(root->left);
  printPreorder(root->right);
}


//type 3
void printInorder(node *root)
{
  if(root==NULL)
  return;

  printInorder(root->left);
  cout<<root->info<<" ";
  printInorder(root->right);
}

//level order traversal
void levelOrderTraversal(node *root)
{
  if(root==NULL)
  return;

  queue <node*> q;
  q.push(root);
  while(!q.empty())
  {
    node *current = q.front();
    cout<<current->info<<" ";
    if(current->left!=NULL)
    q.push(current->left);
    if(current->right!=NULL)
    q.push(current->right);
    q.pop();
  }
}

int main()
{
  struct node *root = createNode(1);
  root->left = createNode(2);
  root->right = createNode(3);
  root->left->left = createNode(4);
  root->left->right = createNode(5);
  root->right->left = createNode(6);
  cout<<"Inorder: "<<endl;
  printInorder(root);
  cout<<endl<<"Preorder: "<<endl;
  printPreorder(root);
  cout<<endl<<"Postorder: "<<endl;
  printPostorder(root);
  cout<<endl<<"LevelOrder: "<<endl;
  levelOrderTraversal(root);
  return 0;
}

