#include <iostream>
#include <queue> 
#include <stack>
#include <algorithm>
using namespace std; 


class node
{
  public:
  int data;
  node* left;
  node* right;

  node(int data)
  {
      this->data= data;
      left=NULL;
      right = NULL;
  }
};

//searching is done in o(h) time where o(logn)<=o(h)<=o(n)
bool searchNode(node* root, int data)
{
    if(root==NULL)
    return false;

    if(root->data==data)
    return true;

    if(data<=root->data)
    return searchNode(root->left, data);
    else
    {
        return searchNode(root->right, data);
    }
}


node* insertInBST(node* root, int data)
{
    if(root==NULL)
    return new node(data);

    if(data<=root->data)
    {
        root->left = insertInBST(root->left, data);
    }
    else
    {
        root->right = insertInBST(root->right,data);
    }
    return root;
}
node* build()
{
    int d;
    cin>>d;
    
    node* root = NULL;
    while(d!=-1)
    {
       root = insertInBST(root, d);
       cin>>d;
    }
    return root;
}

void inOrder(node* root)
{
    if(root==NULL)
    return;

    inOrder(root->left);
    cout<<root->data<<" ";
    inOrder(root->right);
}

void bfs(node* root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty())
    {
        node* f = q.front();
        if(f==NULL)
        {
            cout<<endl;
            q.pop();
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            q.pop();
            cout<<f->data<<" ";

            if(f->left)
            q.push(f->left);

            if(f->right)
            q.push(f->right);
        }
        
    }
}
int main()
{   
    node* root = build();
    //sample input looks like: 6 3 9 2 4 8 10 11 -1 dataToSearch
    int data;
    cin>>data;

    bool isData = searchNode(root, data);
    if(isData)
    cout<<"Found";
    else
    {
        cout<<"Not Present";
    }
    
    return 0;
}