#include <iostream>
#include <queue> 
#include <stack>
#include <algorithm>
using namespace std; 

class node
{
    public:
    int data;
    node* left;
    node* right;

    node(int data)
    {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

node* insertInBST(node* root, int d)
{
    if(root==NULL)
    return new node(d);

    if(d<=root->data)
    root->left = insertInBST(root->left, d);
    else
    {
        root->right = insertInBST(root->right,d);
    }
    return root;
}

node* build()
{
   int d;
   cin>>d;
   
   node* root = NULL;
   while(d!=-1)
   {
      root = insertInBST(root, d);
      cin>>d;

   }  
   return root;
}

void bfs(node* root)
{
    queue<node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty())
    {
        node* f = q.front();
        if(f==NULL)
        {
            cout<<endl;
            q.pop();
            if(!q.empty())
            {
                q.push(NULL);
            }
        }
        else
        {
            q.pop();
            cout<<f->data<<" ";

            if(f->left)
            q.push(f->left);

            if(f->right)
            q.push(f->right);
        }
    }
}

node* deleteNode(node* root, int data)
{
    if(root==NULL)
    return NULL;

    if(data<root->data)
    {
        root->left = deleteNode(root->left, data);
        return root;
    }
    else if(data>root->data)
    {
        root->right = deleteNode(root->right,data);
        return root;
    }
    else
    {
        //data==root->data
        //then we have 3 cases

        //case 1 : node with zero child
        if(root->left==NULL && root->right==NULL)
        {
            delete(root);
            return NULL;
        }

        //case 2 : node with one child
        //2.1 child is on left side
        if(root->right==NULL && root->left!=NULL)
        {
            node* temp = root->left;
            delete(root);
            return temp;
        }
        //2.2 child is on right side
        if(root->right!=NULL && root->left==NULL)
        {
            node* temp = root->right;
            delete(root);
            return temp;
        }

        //case 3: Root with 2 childs
        //we wil replace the data of root with inorder successor i.e. smallest element in right subtree of the root

        node* replace = root->right;
        while(replace->left!=NULL)
        {
             replace = replace->left;
        }
        //now replace will contain the smallest node in right subtree of the root
        root->data = replace->data;
        //data of node to be deleted is replace by smallest value of its subtree
        //now we have to delete the smallest node of subtree

        root->right = deleteNode(root->right, replace->data);
        return root;
    }
    
}

int main()
{
    node* root = build();
    //sample input: 9 4 21 2 5 15 24 1 22 -1 nodeDataToBeDeleted
    bfs(root);
    int d;
    cin>>d;
    root = deleteNode(root, d);
    cout<<endl<<"New Tree"<<endl;
    bfs(root);
    return 0;
}