#include <bits/stdc++.h>
using namespace std;

class node
{
  public:
  int data;
  node* left;
  node* right;

  node(int d)
  {
    data = d;
    left = NULL;
    right = NULL;
  }
};

node* buildTreeFromPreInTraversals(int *pre, int *in, int s, int e)
{
  static int i = 0;
  if(s>e)
  return NULL;
  
  node *root = new node(pre[i]);
  
  int index= -1;
  for(int j=s; j<=e; j++)
  {
    if(in[j]==pre[i])
    {
      index = j;
      break;
    }
  }
  

  i++;
  root->left = buildTreeFromPreInTraversals(pre, in, s, index-1);
  root->right = buildTreeFromPreInTraversals(pre, in, index+1, e);
  return root;
}

void bfs(node* root)
{
  queue<node*> q;
  q.push(root);
  q.push(NULL);

  while(!q.empty())
  {
    node * f = q.front();
    if(f==NULL)
    {
      cout<<endl;
      q.pop();
      if(!q.empty())
      q.push(NULL);
    }
    else
    {
      q.pop();
      cout<<f->data<<" ";

      if(f->left)
      q.push(f->left);

      if(f->right)
      q.push(f->right);
    }
  }
}


int main()
{
  int pre[] = {1,2,3,4,8,5,6,7};
  int in[]={3,2,8,4,1,6,7,5};
  int s = 0;
  int n = sizeof(in)/sizeof(int);
  int e = n-1;
  node* root = buildTreeFromPreInTraversals(pre, in, s, e);
  bfs(root);
  return 0;
}