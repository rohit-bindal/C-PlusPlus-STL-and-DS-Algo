#include <bits/stdc++.h>
using namespace std;

class node
{
  public:
  int data;
  node* left;
  node* right;

  node(int d)
  {
    data = d;
    left = NULL;
    right = NULL;
  }
};

node* buildHeightBalancedTreeFromArray(int *a, int s, int e)
{
  if(s>e)
  return NULL;

  int mid = (s+e)/2;
  node *root = new node(a[mid]);
  root->left = buildHeightBalancedTreeFromArray(a,s,mid-1);
  root->right = buildHeightBalancedTreeFromArray(a, mid+1 , e);
  return root;
}

class HBPair{
  public:
  int height;
  bool balance;
};

HBPair isBalancedTree(node *root)
{
  HBPair p;
  if(root==NULL)
  {
    p.height=0;
    p.balance= true;
    return p;
  }

  HBPair left = isBalancedTree(root->left);
  HBPair right = isBalancedTree(root->right);

  p.height = max(left.height, right.height)+1;

  if(abs(left.height-right.height)<=1 && left.balance && right.balance)
  {
    p.balance = true;
  }
  else
  {
    p.balance = false;
  }
  return p;
}

void bfs(node* root)
{
  queue<node*> q;
  q.push(root);
  q.push(NULL);

  while(!q.empty())
  {
    node* f = q.front();
    if(f==NULL)
    {
      cout<<endl;
      q.pop();
      if(!q.empty())
      {
        q.push(NULL);
      }
    }
    else{
      q.pop();
      cout<<f->data<<" ";

      if(f->left)
      q.push(f->left);

      if(f->right)
      q.push(f->right);
    }
  }
}

int main()
{
   int a[10] = {1,2,3,4,5,6,7,8,9,10};
   int s = 0;
   int e = 9;
   node *root = buildHeightBalancedTreeFromArray(a, s, e);
   bfs(root);
   cout<<endl;
   HBPair p = isBalancedTree(root);
   if(p.balance)
   cout<<"Balanced";
   else
   {
     cout<<"Not Balanced";
   }
   
  return 0;
}

