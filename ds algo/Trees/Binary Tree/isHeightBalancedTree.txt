#include <bits/stdc++.h>
using namespace std;

class node
{
  public:
  int data;
  node* left;
  node* right;

  node(int d)
  {
    data = d;
    left = NULL;
    right = NULL;
  }
};

int height(node* root)
{
  if(root==NULL)
  return 0;

  int lh = height(root->left);
  int rh = height(root->right);

  return max(lh,rh)+1;
}

node* buildTree()
{
  int d;
  cin>>d;

  if(d==-1)
  return NULL;

  node* root =new node(d);
  root->left = buildTree();
  root->right = buildTree();
  return root;
}

class HBPair
{
  public:
  int height;
  bool balance;
};

HBPair isHeightBalancedTree(node * root)
{
  HBPair p;
  if(root==NULL)
  {
    p.height=0;
    p.balance=true;
    return p;
  }

  HBPair left = isHeightBalancedTree(root->left);
  HBPair right = isHeightBalancedTree(root->right);

  p.height = max(left.height, right.height)+1;

  if(abs(left.height-right.height)<=1 && left.balance && right.balance)
  {
    p.balance = true;
  } 
  else
  {
    p.balance = false;
  }

  return p;
}
int main()
{
  node * root = buildTree();
  HBPair p  = isHeightBalancedTree(root);
  if(p.balance)
  {
    cout<<"Balanced";
  }
  else
  {
    cout<<"Not balanced";
  }
  
  return 0;
}

