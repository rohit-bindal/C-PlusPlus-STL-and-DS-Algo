#include <bits/stdc++.h>
using namespace std;

class node
{
    public:
    int data;
    node* next;

    node(int data)
    {
        this->data =data;
        next = NULL;
    }
};

void insertAtHead(node* &head, int data)
{
    
    node *n = new node(data);
    node* temp = head;
     n->next = head;
        
    if(head!=NULL)
    {  
        while(temp->next!=head)
        {
            temp = temp->next;
        }
      
        temp->next = n;
    }
    else
    {
        //if only one node is present then it will point itself 
        n->next=n;
    }
   head = n;    
}

void print(node* head)
{
    
    if(head==NULL)
    cout<<"List is empty";
    else
    {
       node* temp = head;
       while(temp->next!=head)
       {
           cout<<temp->data<<"->";
           temp = temp->next;
       }
       cout<<temp->data;
    }
}

node* getNode(node* head, int data)
{
    node* temp = head;
    while(temp->next!=head)
    {
        if(temp->data==data)
        {
            return temp;
        }
        temp = temp->next;
    }
    if(temp->data== data)
    {
        return temp;
    }
    else
    {
        return NULL;
    }
}

void deleteNode(node* &head, int data)
{
    node* del = getNode(head, data);
    node* temp = head;
    if(del!=NULL)
    {
        if(del==head)
        {
          while(temp->next!=head)
          {
              temp = temp->next;
          }
        head = del->next;
        temp->next = head;
        delete del;
       }
       else
       {
           while(temp->next!=del)
           {
               temp = temp->next;
           }
           temp->next = del->next;
           delete del;
       }
    }
    else
    {
        cout<<"Value is not present";
    }
    
}

int main()
{
     node* head = NULL;
     insertAtHead(head, 50);
     insertAtHead(head, 40);
     insertAtHead(head, 30);
     insertAtHead(head, 20);
     insertAtHead(head, 10);
     print(head);
     deleteNode(head, 50);
     cout<<endl;
     print(head);
    return 0;
}