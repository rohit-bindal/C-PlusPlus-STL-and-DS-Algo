#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long


//Distance calculated by bfs will be shortes if the graph is unweighted !

template<typename T>
class Graph{
    map<T,list<T>> l;
    
    public:
    void addEdge(int x, int y)
    {
      l[x].push_back(y);
      l[y].push_back(x);
    }

    void bfs(T src)
    {
       queue<T> q;
       map<T, T> dist; //dist = distance of current node from the source node

       for(auto node_pair : l)
       {
           T node = node_pair.first;
           dist[node] = INT_MAX;
       }

       dist[src] = 0;
       q.push(src);

       while(!q.empty())
       {
            T node= q.front();
           q.pop();
           for(auto i: l[node])
           {
               if(dist[i]==INT_MAX)
               {
                   q.push(i);
                   dist[i] = dist[node]+1; 
               }
           }
       }

       for(auto node_pair:l)
       {
           T node= node_pair.first;
           T distance = dist[node];
           cout<<"Node "<<node<<" distance from source: "<<distance<<endl;
       }
    }
};

int32_t main()
{
  IOS;
  Graph<int> g;
  g.addEdge(1,0);
  g.addEdge(1,2);
  g.addEdge(2,3);
  g.addEdge(3,0);
  g.addEdge(3,4);
  g.addEdge(4,5);
  g.bfs(0);
  return 0;
}

