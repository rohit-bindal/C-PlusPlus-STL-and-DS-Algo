#include <bits/stdc++.h>
using namespace std;
 
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define endl "\n"
#define int long long

//bfs of graph is just like level order traversing of trees
//Make a Queue
//Put Source node (from where we have to start traversing) in the queue
//Make source node as visited
//push its neighbours in the queue (if they have not visited yet)
//pop source node
//keep doing until the queue is not empty

template<typename T>
class Graph{
    
    map<T, list<T>> l;

    public:
    addEdge(int x, int y)
    {
        l[x].push_back(y);
        l[y].push_back(x);
    }

    void bfs(T src)
    {
        queue<T> q;
        map<T, bool> visited;

        q.push(src);
        visited[src] = true;
        
        while(!q.empty())
        {
            T node = q.front();
            cout<<node<<" ";
            q.pop();
            for(auto i: l[node])
            {
                if(!visited[i])
                {
                    q.push(i);
                    visited[i] = true;
                }
            }
        }
    }
};


int32_t main()
{
  IOS;
  Graph<int> g;
  g.addEdge(2,1);
  g.addEdge(2,3);
  g.addEdge(1,0);
  g.addEdge(3,0);
  g.addEdge(3,4);
  g.addEdge(4,5);
  g.bfs(0);
  return 0;
}

